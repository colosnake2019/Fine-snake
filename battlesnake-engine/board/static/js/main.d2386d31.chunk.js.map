{"version":3,"sources":["utils/game-state.js","reducers/index.js","utils/url.js","components/blank-state.jsx","theme/index.js","components/grid.jsx","components/board.jsx","io/websocket.js","utils/inline-svg.js","utils/engine-client.js","components/avatar.jsx","components/scoreboard.jsx","components/mediaControls.jsx","components/game.jsx","actions/index.js","containers/app.jsx","index.js"],"names":["DEFAULT_HEAD_DIRECTION","formatFrame","frame","Turn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Snakes","Symbol","iterator","next","done","snake","value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Body","part","X","Y","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Food","food","cleanFrame","positions","snakes","formatSnakes","turn","map","formatPosition","gameOver","isLastFrameOfGame","sanitizeFrame","sanitizedFrame","cloneDeep","i","headSvg","tailSvg","_id","formatSnake","body","p","partIndex","direction","getDirection","headDirection","shouldRender","isCovered","type","getType","x","y","formatSnakePart","color","Color","ID","name","Name","health","Health","isDead","Death","death","formatDeath","head","HeadType","tail","TailType","HeadSvg","TailSvg","cause","Cause","length","pos","a","b","filter","s","oneLeft","windowPostMessage","data","window","parent","postMessage","e","console","error","parseArg","parts","split","key","decodeURIComponent","makeQueryString","query","sep","result","concat","httpToWsProtocol","url","mappings","http","https","from","to","substr","Error","join","_len","arguments","Array","_key","reduce","current","cleanA","replace","cleanB","joinPair","BlankState","react_default","createElement","location","origin","React","Component","colors","breakpoints","themes","HIGHLIGHT_DIM","DEAD_OPACITY","CELL_SIZE","CELL_SPACING","toGridSpace","slot","getPartWidth","extraWidth","getPartHeight","extraHeight","getPartXOffset","xBias","getPartYOffset","yBias","getOpacity","highlightedSnake","range","size","push","Grid","snakeIndex","this","renderHeadPart","renderTailPart","behind","checkIfCornerPart","renderCornerPart","renderMiddlePart","highlighted","getHeadXOffset","getHeadYOffset","box","viewBox","baseVal","transform","halfX","width","halfY","height","getHeadTransform","viewBoxStr","fill","opacity","shapeRendering","dangerouslySetInnerHTML","__html","innerHTML","determineCornerType","d","getTailXOffset","getTailYOffset","getTailTransform","_this","unsortedSnakes","props","sortedSnakes","sort","viewBoxWidth","columns","viewBoxHeight","rows","maxWidth","maxHeight","_","row","col","theme","renderPart","f","foodIndex","cx","cy","r","renderGrid","Board","grid","streamAll","receive","Promise","resolve","reject","ws","WebSocket","addEventListener","obj","JSON","parse","close","loaded","getSvg","path","requireSvg","fetchSvg","_callee","response","svgText","svg","regenerator_default","wrap","_context","prev","fetch","sent","text","makeDom","abrupt","stop","wrapper","document","trim","firstChild","DEFAULT_SNAKE_HEAD","DEFAULT_SNAKE_TAIL","fetchResult","json","delay","millis","setTimeout","getAllSvgs","all","unique","Set","assignHeadAndTailUrls","getSnakeHeadSvgUrl","getSnakeTailSvgUrl","setHeadAndTailSvgs","_callee2","_context2","paths","t0","finish","isIllegalSvgPath","nameOrPath","indexOf","svgUrlFromName","base","relative","prepareFrame","_callee3","_context3","fetchGameInfo","baseUrl","gameId","get","fetchGameStart","_x5","_x6","_fetchGameStart","apply","_callee4","_context4","method","cache","streamAllFrames","_x7","_x8","_x9","_streamAllFrames","_callee6","receiveFrame","game","chain","onFrame","wsUrl","_context6","then","Object","asyncToGenerator","mark","_callee5","_context5","getFrameByTurn","frames","AvatarWrapper","styled","marginBottom","paddingTop","paddingBottom","display","HealthBarWrapper","background","borderRadius","HealthBar","_ref","backgroundColor","CauseOfDeath","_ref2","padding","fontSize","Avatar","getReadableCauseOfDeath","style","Wrapper","_templateObject","hide","_templateObject2","Scoreboard","state","toggleHighlight","getSnakeToHighlight","highlightSnake","setState","_this2","aliveSnakes","aLower","toLowerCase","bLower","deadSnakes","reverse","orderSnakes","scoreboard_AvatarWrapper","onClick","avatar","MediaControlsWrapper","mediaControls_templateObject","TurnCount","justifyContent","ButtonWrapper","Button","mediaControls_templateObject2","MediaControls","handleReload","reloadGame","handlePlayPause","toggleGamePause","handleBackward","stepBackwardFrame","handleForward","stepForwardFrame","handleKeyEvent","keyEvents","renderControls","_this$props","currentFrame","hideControls","paused","disabled","react_keyboard_event_handler_default","handleKeys","onKeyEvent","q","PageWrapper","game_templateObject","LoadingIndicator","alignItems","GameBoardWrapper","BoardWrapper","game_templateObject2","_ref3","hideScoreboard","ScoreboardWrapper","_templateObject3","_ref4","Game","options","boardTheme","engine","setEngineOptions","fetchFrames","invalidArgs","blank_state","renderGame","className","board","mediaControls","hideMediaControls","scoreboard","setCurrentFrame","dispatch","getState","_getState$engineOptio","autoplay","engineUrl","_frame2","engineOptions","status","Status","playFromFrame","_x","_x2","frameRate","frameIndex","slicedFrames","ceiledFps","delayMillis","_frame3","lastFrame","slice","Math","ceil","_x3","_x4","search","arg","connect","gameStatus","_getState","_getState2","_ref5","_getState3","nextFrame","stepToFrame","_x10","_ref6","_getState4","prevFrame","_x11","_x12","snakeId","middleware","applyMiddleware","thunkMiddleware","store","createStore","action","parseInt","objectSpread","Height","Width","toConsumableArray","id","find","render","es","app","getElementById"],"mappings":"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","file":"static/js/main.d2386d31.chunk.js","sourcesContent":["import cloneDeep from \"lodash.clonedeep\";\n\nconst DEFAULT_HEAD_DIRECTION = \"up\";\n\nexport function formatFrame(frame) {\n  cleanFrame(frame);\n  const snakes = formatSnakes(frame.Snakes);\n  return {\n    turn: frame.Turn,\n    snakes: snakes,\n    food: formatPositions(frame.Food),\n    gameOver: isLastFrameOfGame(frame)\n  };\n}\n\nexport function sanitizeFrame(frame) {\n  // Copy without reference\n  const sanitizedFrame = cloneDeep(frame);\n\n  // nullify some fields\n  for (const i in sanitizedFrame.snakes) {\n    const snake = sanitizedFrame.snakes[i];\n    snake.headSvg = null;\n    snake.tailSvg = null;\n    snake._id = null;\n  }\n\n  return sanitizedFrame;\n}\n\nfunction formatSnakes(snakes) {\n  return snakes.map(formatSnake);\n}\n\nfunction formatSnake(snake) {\n  return {\n    body: snake.Body.map((p, i) => formatSnakePart(snake, i)),\n    color: snake.Color,\n    _id: snake.ID,\n    name: snake.Name,\n    health: snake.Health,\n    isDead: !!snake.Death,\n    death: formatDeath(snake.Death),\n    head: snake.HeadType,\n    tail: snake.TailType,\n    headSvg: snake.HeadSvg,\n    tailSvg: snake.TailSvg\n  };\n}\n\nfunction formatDeath(death) {\n  if (!death) {\n    return;\n  }\n\n  return {\n    cause: death.Cause,\n    turn: death.Turn || 0\n  };\n}\n\nfunction headDirection(snake) {\n  return snake.Body.length > 1\n    ? getDirection(snake.Body[1], snake.Body[0])\n    : DEFAULT_HEAD_DIRECTION;\n}\n\nfunction isCovered(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n\n  return next && next.X === part.X && next.Y === part.Y;\n}\n\nfunction formatSnakePart(snake, partIndex) {\n  const part = snake.Body[partIndex];\n  const next = snake.Body[partIndex - 1];\n  return {\n    direction: next ? getDirection(part, next) : headDirection(snake),\n    shouldRender: !isCovered(snake, partIndex),\n    type: getType(snake, partIndex),\n    x: part.X,\n    y: part.Y\n  };\n}\n\nfunction formatPositions(positions) {\n  return positions.map(formatPosition);\n}\n\nfunction formatPosition(pos) {\n  return {\n    x: pos.X,\n    y: pos.Y\n  };\n}\n\nfunction getDirection(a, b) {\n  if (a.X < b.X) {\n    return \"right\";\n  } else if (b.X < a.X) {\n    return \"left\";\n  } else if (a.Y < b.Y) {\n    return \"down\";\n  }\n  return \"up\";\n}\n\nfunction getType(snake, partIndex) {\n  if (partIndex === 0) {\n    return \"head\";\n  }\n\n  if (partIndex === snake.Body.length - 1) {\n    return \"tail\";\n  }\n\n  return \"body\";\n}\n\n// This is a workaround for fields that are omitted when they have the default\n// value. ie: int fields that need to default to 0 rather than undefined.\nfunction cleanFrame(frame) {\n  frame.Turn = frame.Turn || 0;\n\n  for (const snake of frame.Snakes) {\n    for (const part of snake.Body) {\n      part.X = part.X || 0;\n      part.Y = part.Y || 0;\n    }\n  }\n\n  for (const food of frame.Food) {\n    food.X = food.X || 0;\n    food.Y = food.Y || 0;\n  }\n}\n\nfunction oneLeft(snakes) {\n  const alive = snakes.filter(s => !s.death);\n  return alive.length <= 1;\n}\n\nexport function isLastFrameOfGame(frame) {\n  const snakes = formatSnakes(frame.Snakes);\n\n  if (snakes.length === 0) {\n    return true;\n  }\n\n  if (snakes.length === 1) {\n    return !!snakes[0].death;\n  }\n\n  return oneLeft(snakes);\n}\n","import { formatFrame, sanitizeFrame } from \"../utils/game-state\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case \"SET_ENGINE_OPTIONS\":\n      action.engineOptions.autoplay =\n        action.engineOptions.autoplay &&\n        action.engineOptions.autoplay === \"true\";\n      action.engineOptions.turn = parseInt(action.engineOptions.turn) || 0;\n      return { ...state, engineOptions: action.engineOptions };\n    case \"PAUSE_GAME\":\n      return { ...state, paused: true };\n    case \"GAME_OVER\":\n      return { ...state, paused: true };\n    case \"RESUME_GAME\":\n      return { ...state, paused: false };\n    case \"SET_GAME_STATUS\":\n      return { ...state, gameStatus: action.status };\n    case \"SET_CURRENT_FRAME\":\n      windowPostMessage({\n        action: action.type,\n        frame: sanitizeFrame(action.frame)\n      });\n      return { ...state, currentFrame: action.frame };\n    case \"RECEIVE_FRAME\":\n      const frame = formatFrame(action.frame);\n      return {\n        ...state,\n        grid: {\n          height: action.game.Game.Height,\n          width: action.game.Game.Width\n        },\n        frames: [...state.frames, frame] // Be smart: this consumes A LOT of memory...\n      };\n    case \"REQUEST_FRAMES\":\n      return { ...state };\n    case \"FETCH_FRAMES\":\n      return { ...state };\n    case \"HIGHLIGHT_SNAKE\":\n      windowPostMessage({\n        action: action.type,\n        id: action.snakeId,\n        name: action.snakeId\n          ? state.currentFrame.snakes.find(s => s._id === action.snakeId).name\n          : null\n      });\n      return { ...state, highlightedSnake: action.snakeId };\n    default:\n      return { ...state };\n  }\n};\n\nfunction windowPostMessage(data) {\n  if (!window.parent) {\n    return;\n  }\n  try {\n    window.parent.postMessage(data, \"*\");\n  } catch (e) {\n    console.error(e);\n  }\n}\n","// Creates a dictionary of parameters based on the given query string. q should\n// look like \"?foo=bar&thing=blah\".\nexport function parseQueryString(q) {\n  if (!q || !q.length) {\n    return {};\n  }\n\n  // Array of key/value pairs\n  const args = q\n    .substr(1)\n    .split(\"&\")\n    .map(parseArg);\n\n  // Convert to object\n  return args.reduce((result, arg) => {\n    result[arg.key] = arg.value;\n    return result;\n  }, {});\n}\n\n// Converts \"asdf=qwer\" to { asdf: \"qwer\" } or \"asdf\" to { asdf: true }. The\n// latter example is to allow switch-like parameters like ?enableThing without\n// an equals sign.\nfunction parseArg(a) {\n  const parts = a.split(\"=\");\n  const key = parts[0];\n  const value = parts[1] === undefined ? true : decodeURIComponent(parts[1]);\n  return { key, value };\n}\n\n// Converts { a: \"aaa\", b: \"bbb\" } to \"?a=aaa&b=bbb\"\nexport function makeQueryString(query) {\n  if (!query) {\n    return \"\";\n  }\n\n  let sep = \"?\";\n  let result = \"\";\n\n  for (const key in query) {\n    const value = query[key];\n    result += `${sep}${key}=${value}`;\n    sep = \"&\";\n  }\n\n  return result;\n}\n\n// Converts http://foo to ws://foo or https://foo to wss://foo\nexport function httpToWsProtocol(url) {\n  const mappings = {\n    http: \"ws\",\n    https: \"wss\"\n  };\n\n  for (const from in mappings) {\n    const to = mappings[from];\n    if (url.substr(0, from.length + 1) === from + \":\") {\n      return to + url.substr(from.length);\n    }\n  }\n\n  throw new Error(\"Invalid URL: \" + url);\n}\n\n// Joins path components and makes sure there is exactly one '/' separating\n// them.\nexport function join(...parts) {\n  function joinPair(a, b) {\n    const cleanA = a.replace(/\\/+$/, \"\");\n    const cleanB = b.replace(/^\\/+/, \"\");\n\n    if (cleanA === \"\") {\n      return cleanB;\n    }\n\n    if (cleanB === \"\") {\n      return cleanA;\n    }\n\n    return `${cleanA}/${cleanB}`;\n  }\n\n  return parts.reduce((current, next) => joinPair(current, next), \"\");\n}\n","import React from \"react\";\n\nclass BlankState extends React.Component {\n  render() {\n    return (\n      <div>\n        To run a game you need to specify engine and game parameters in the URL.\n        For example:\n        <pre>\n          {window.location.origin}?engine=&lt;ENGINE_URL&gt;&amp;game=&lt;GAME_ID&gt;\n        </pre>\n      </div>\n    );\n  }\n}\n\nexport default BlankState;\n","export const colors = {\n  // Page\n  pageBackground: \"transparent\",\n\n  // Grid\n  gridDot: \"#6a208f\",\n  food: \"#ff5c75\",\n\n  // Scoreboard\n  healthBar: \"#0f0\",\n  healthBarBackground: \"#fefefe\",\n  healthBarOutline: \"#666\",\n  healthBarDeathBackground: \"#f1f1f1\",\n  healthBarDeathBackgroundDark: \"#bbb\",\n\n  // Misc\n  lightText: \"#efefef\",\n  darkText: \"#222\",\n\n  // Colour names (from theme)\n  blue: \"#007bff\",\n  indigo: \"#6610f2\",\n  purple: \"#6f42c1\",\n  pink: \"#e83e8c\",\n  red: \"#dc3545\",\n  orange: \"#fd7e14\",\n  yellow: \"#ffc107\",\n  green: \"#28a745\",\n  teal: \"#20c997\",\n  cyan: \"#17a2b8\",\n  white: \"#fff\",\n  gray: \"#6c757d\",\n  grayLight: \"#f1f1f1\",\n  grayDark: \"#343a40\",\n  primary: \"#007bff\",\n  secondary: \"#6c757d\",\n  success: \"#28a745\",\n  info: \"#17a2b8\",\n  warning: \"#ffc107\",\n  danger: \"#dc3545\",\n  light: \"#f8f9fa\",\n  dark: \"#343a40\"\n\n  // OLD\n  // orange: \"#ffa500\",\n  // purple: \"#240458\",\n};\n\nexport const breakpoints = {\n  sm: \"576px\",\n  md: \"768px\",\n  lg: \"992px\",\n  xl: \"1200px\"\n};\n\nexport const themes = {\n  // Themes\n  dark: \"dark\",\n  light: \"light\"\n};\n","import React from \"react\";\nimport { colors, themes } from \"../theme\";\n\nconst HIGHLIGHT_DIM = 0.25;\nconst DARK_DIM = 0.75;\nconst DEAD_OPACITY = 0.1;\nconst CELL_SIZE = 20;\nconst CELL_SPACING = 4;\n\nfunction toGridSpace(slot) {\n  return (CELL_SIZE + CELL_SPACING) * slot + CELL_SPACING;\n}\n\nfunction getPartWidth(part) {\n  const extraWidth =\n    part.direction === \"left\" || part.direction === \"right\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraWidth;\n}\n\nfunction getPartHeight(part) {\n  const extraHeight =\n    part.direction === \"up\" || part.direction === \"down\" ? CELL_SPACING : 0;\n  return CELL_SIZE + extraHeight;\n}\n\nfunction getPartXOffset(part) {\n  const xBias = part.direction === \"left\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.x) + xBias;\n}\n\nfunction getPartYOffset(part) {\n  const yBias = part.direction === \"up\" ? -CELL_SPACING : 0;\n  return toGridSpace(part.y) + yBias;\n}\n\nfunction getTailXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x) - CELL_SPACING;\n    case \"right\":\n      return toGridSpace(part.x) + CELL_SPACING;\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getTailYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y) - CELL_SPACING;\n    case \"down\":\n      return toGridSpace(part.y) + CELL_SPACING;\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getHeadXOffset(part) {\n  switch (part.direction) {\n    case \"left\":\n      return toGridSpace(part.x);\n    case \"right\":\n      return toGridSpace(part.x);\n    default:\n      return toGridSpace(part.x);\n  }\n}\n\nfunction getHeadYOffset(part) {\n  switch (part.direction) {\n    case \"up\":\n      return toGridSpace(part.y);\n    case \"down\":\n      return toGridSpace(part.y);\n    default:\n      return toGridSpace(part.y);\n  }\n}\n\nfunction getOpacity(snake, highlightedSnake) {\n  if (highlightedSnake) {\n    return snake._id === highlightedSnake ? 1 : HIGHLIGHT_DIM;\n  }\n\n  return snake.isDead ? DEAD_OPACITY : 1;\n}\n\nfunction range(size) {\n  const result = [];\n  for (let i = 0; i < size; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction sortAliveSnakesOnTop(snakes) {\n  return snakes.concat().sort((a, b) => {\n    const aOrder = a.isDead ? 0 : 1;\n    const bOrder = b.isDead ? 0 : 1;\n    return aOrder - bOrder;\n  });\n}\n\nfunction getHeadTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"left\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction getTailTransform(direction, viewBox) {\n  const halfX = viewBox.width / 2;\n  const halfY = viewBox.height / 2;\n  switch (direction) {\n    case \"right\":\n      return `rotate(180 ${halfX} ${halfY})`;\n    case \"down\":\n      return `rotate(-90 ${halfX} ${halfY})`;\n    case \"up\":\n      return `rotate(90 ${halfX} ${halfY})`;\n    default:\n      return \"\";\n  }\n}\n\nfunction checkIfCornerPart(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  // Return false if the behind part has the same position as the current.\n  // Relevant for when the snake initially spawns.\n  if (behind.x === current.x && behind.y === current.y) return false;\n\n  return behind.direction !== current.direction;\n}\n\nfunction determineCornerType(snake, partIndex) {\n  // If head or tail of the snake, then false\n  if (partIndex === 0 || partIndex === snake.body.length - 1) return false;\n\n  const behind = snake.body[partIndex + 1];\n  const current = snake.body[partIndex];\n\n  return `${current.direction} ${behind.direction}`;\n}\n\nclass Grid extends React.Component {\n  renderPart(snake, snakeIndex, part, partIndex, highlightedSnake) {\n    switch (part.type) {\n      case \"head\":\n        return this.renderHeadPart(snake, snakeIndex, part, highlightedSnake);\n      case \"tail\":\n        return this.renderTailPart(snake, snakeIndex, part, highlightedSnake);\n      default:\n        if (checkIfCornerPart(snake, partIndex)) {\n          return this.renderCornerPart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        } else {\n          return this.renderMiddlePart(\n            snake,\n            snakeIndex,\n            part,\n            partIndex,\n            highlightedSnake\n          );\n        }\n    }\n  }\n\n  renderHeadPart(snake, snakeIndex, part, highlighted) {\n    const x = getHeadXOffset(part);\n    const y = getHeadYOffset(part);\n    const box = snake.headSvg.viewBox.baseVal;\n    const transform = getHeadTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",head\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.headSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderMiddlePart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",\" + partIndex} />;\n    }\n\n    return (\n      <rect\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      />\n    );\n  }\n\n  renderCornerPart(snake, snakeIndex, part, partIndex, highlighted) {\n    if (!part.shouldRender) {\n      return (\n        <svg\n          key={`part${snakeIndex},${part.x},${part.y}`}\n          shapeRendering=\"optimizeSpeed\"\n        />\n      );\n    }\n\n    let viewBox, transform;\n    let path = \"M0,0 h40 a60,60 0 0 1 61,60 v81 h-101 z\";\n\n    switch (part.direction) {\n      case \"left\":\n      case \"right\":\n        viewBox = \"0 0 120 100\";\n        break;\n      case \"up\":\n      case \"down\":\n      default:\n        viewBox = \"0 0 100 120\";\n        break;\n    }\n\n    switch (determineCornerType(snake, partIndex)) {\n      case \"down left\":\n        transform = \"scale(-1,1) translate(-100, 0)\";\n        break;\n      case \"left down\":\n        transform = \"rotate(90,0,0) translate(0,-120)\";\n        break;\n      case \"right down\":\n        transform = \"rotate(90,0,0) scale(1,-1)\";\n        break;\n      case \"up right\":\n        transform = \"scale(1,-1) translate(0,-120)\";\n        break;\n      case \"up left\":\n        transform = \"scale(-1,-1) translate(-100,-120)\";\n        break;\n      case \"right up\":\n        transform = \"rotate(-90,0,0) translate(-100,0)\";\n        break;\n      case \"left up\":\n        transform = \"rotate(-90,0,0) scale(1,-1) translate(-100,-120)\";\n        break;\n      case \"down right\":\n      default:\n        break;\n    }\n\n    return (\n      <svg\n        key={`part${snakeIndex},${part.x},${part.y}`}\n        x={getPartXOffset(part)}\n        y={getPartYOffset(part)}\n        width={getPartWidth(part)}\n        height={getPartHeight(part)}\n        opacity={getOpacity(snake, highlighted)}\n        fill={snake.color}\n        viewBox={viewBox}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <path d={path} transform={transform} />\n      </svg>\n    );\n  }\n\n  renderTailPart(snake, snakeIndex, part, highlighted) {\n    const x = getTailXOffset(part);\n    const y = getTailYOffset(part);\n    const box = snake.tailSvg.viewBox.baseVal;\n    const transform = getTailTransform(part.direction, box);\n    const viewBoxStr = `${box.x} ${box.y} ${box.width} ${box.height}`;\n\n    if (!part.shouldRender) {\n      return <svg key={\"part\" + snakeIndex + \",tail\"} />;\n    }\n\n    return (\n      <svg\n        key={\"part\" + snakeIndex + \",tail\"}\n        viewBox={viewBoxStr}\n        x={x}\n        y={y}\n        width={CELL_SIZE}\n        height={CELL_SIZE}\n        fill={snake.color}\n        opacity={getOpacity(snake, highlighted)}\n        shapeRendering=\"optimizeSpeed\"\n      >\n        <g\n          transform={transform}\n          dangerouslySetInnerHTML={{ __html: snake.tailSvg.innerHTML }}\n        />\n      </svg>\n    );\n  }\n\n  renderGrid() {\n    const unsortedSnakes = this.props.snakes || [];\n    const food = this.props.food || [];\n\n    // Make alive snakes render on top of dead snakes\n    const sortedSnakes = sortAliveSnakesOnTop(unsortedSnakes);\n\n    const viewBoxWidth = toGridSpace(this.props.columns);\n    const viewBoxHeight = toGridSpace(this.props.rows);\n\n    return (\n      <svg\n        width={this.props.maxWidth}\n        height={this.props.maxHeight}\n        x={this.props.x}\n        y={this.props.y}\n        viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}\n      >\n        {range(this.props.rows).map((_, row) =>\n          range(this.props.columns).map((_, col) => (\n            <rect\n              key={\"cell\" + row + \",\" + col}\n              x={toGridSpace(col)}\n              y={toGridSpace(row)}\n              width={CELL_SIZE}\n              height={CELL_SIZE}\n              fill={\n                this.props.theme === themes.dark ? \"#ddd\" : colors.grayLight\n              }\n              opacity={\n                this.props.highlightedSnake\n                  ? HIGHLIGHT_DIM\n                  : this.props.theme === themes.dark\n                  ? DARK_DIM\n                  : null\n              }\n              shapeRendering=\"optimizeSpeed\"\n            />\n          ))\n        )}\n\n        {sortedSnakes.map((snake, snakeIndex) => {\n          return snake.body.map((part, partIndex) =>\n            this.renderPart(\n              snake,\n              snakeIndex,\n              part,\n              partIndex,\n              this.props.highlightedSnake\n            )\n          );\n        })}\n\n        {food.map((f, foodIndex) => (\n          <circle\n            key={\"food\" + foodIndex}\n            cx={toGridSpace(f.x) + CELL_SIZE / 2}\n            cy={toGridSpace(f.y) + CELL_SIZE / 2}\n            r={CELL_SIZE / 3.25}\n            fill={colors.food}\n            opacity={this.props.highlightedSnake ? HIGHLIGHT_DIM : null}\n            shapeRendering=\"optimizeQuality\"\n          />\n        ))}\n      </svg>\n    );\n  }\n\n  render() {\n    if (this.props.snakes) {\n      return this.renderGrid();\n    } else {\n      return;\n    }\n  }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Grid from \"./grid\";\n\nconst BOARD_SIZE = 100;\n\nclass Board extends React.Component {\n  render() {\n    return (\n      <svg viewBox={`0 0 ${BOARD_SIZE} ${BOARD_SIZE}`}>\n        <Grid\n          snakes={this.props.snakes}\n          food={this.props.food}\n          columns={this.props.columns}\n          rows={this.props.rows}\n          highlightedSnake={this.props.highlightedSnake}\n          theme={this.props.theme}\n          maxWidth={BOARD_SIZE}\n          maxHeight={BOARD_SIZE}\n          x={0}\n          y={0}\n        />\n      </svg>\n    );\n  }\n}\n\nexport default Board;\n","// Establishes websocket connection on given url and then calls receive for\n// every object sent from the server. Returns a promise that resolves when\n// receive returns true or when the server closes the connection.\nexport function streamAll(url, receive) {\n  let done = false;\n\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n    ws.addEventListener(\"message\", e => {\n      const obj = JSON.parse(e.data);\n      done = receive(obj);\n      if (done) {\n        ws.close();\n        resolve();\n      }\n    });\n\n    ws.addEventListener(\"onerror\", e => {\n      reject(e);\n    });\n\n    ws.addEventListener(\"onclose\", e => {\n      if (!done) {\n        done = true;\n        resolve();\n      }\n    });\n  });\n}\n","/**\n * This file contains helper functions for async loading svg files that\n * can be injected inline into an html <svg> element. This is better than\n * alternatives for the following reasons:\n *\n *    <use href=\"...\"> has a problem where the game could start before the\n *    svg has finished loading whereas this method gives a promise we can wait\n *    for.\n *\n *    <image src=\"...\"> has a problem where the fill color of the image cannot\n *    be overriden. Inline svg solves this problem and allows css styles to\n *    cascade into the svg content. <use> may also have this problem?\n *\n *    Directly embedding the svg xml into react components (or similar) would\n *    mostly solve everything except that it eliminates the possibility of\n *    pulling in svg data from external trusted sources.\n *\n * The main downside to this method is that the source of the svg must be\n * trusted or else you are vulnerable to xss attacks.\n */\n\nconst loaded = {};\n\nexport function loadSvgs(paths) {\n  return Promise.all(paths.map(requireSvg));\n}\n\nexport function getSvg(path) {\n  return loaded[path];\n}\n\nfunction requireSvg(path) {\n  if (path in loaded) {\n    return Promise.resolve(loaded[path]);\n  }\n\n  return fetchSvg(path);\n}\n\nasync function fetchSvg(path) {\n  const response = await fetch(path);\n  const svgText = await response.text();\n  const svg = makeDom(svgText);\n  loaded[path] = svg;\n  return svg;\n}\n\nfunction makeDom(svgText) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.innerHTML = svgText.trim();\n  return wrapper.firstChild;\n}\n","import { streamAll } from \"../io/websocket\";\nimport { makeQueryString, httpToWsProtocol, join } from \"./url\";\nimport { loadSvgs, getSvg } from \"./inline-svg\";\nimport { isLastFrameOfGame } from \"./game-state\";\n\nconst DEFAULT_SNAKE_HEAD = \"tongue\";\nconst DEFAULT_SNAKE_TAIL = \"bolt\";\n\nasync function get(url, query) {\n  const fetchResult = await fetch(url + makeQueryString(query));\n  return fetchResult.json();\n}\n\nexport function delay(millis) {\n  return new Promise(resolve => setTimeout(resolve, millis));\n}\n\nexport function getReadableCauseOfDeath(cause) {\n  // Based on https://github.com/battlesnakeio/engine/blob/master/rules/death_cause.go\n\n  switch (cause) {\n    case \"snake-collision\":\n      return \"Collided with snake body\";\n    case \"snake-self-collision\":\n      return \"Collided with own body\";\n    case \"starvation\":\n      return \"Starvation\";\n    case \"head-collision\":\n      return \"Head on head collision\";\n    case \"wall-collision\":\n      return \"Collided with a wall\";\n    default:\n      return cause;\n  }\n}\n\n// Gets a list of all unique SVG paths required by the snakes.\nfunction getAllSvgs(snakes) {\n  const all = snakes.reduce((result, snake) => {\n    return result.concat([snake.HeadType, snake.TailType]);\n  }, []);\n  const unique = new Set(all);\n  return Array.from(unique);\n}\n\nfunction assignHeadAndTailUrls(snakes) {\n  for (const snake of snakes) {\n    // Assign default if missing\n    if (!snake.HeadType) {\n      snake.HeadType = DEFAULT_SNAKE_HEAD;\n    }\n    if (!snake.TailType) {\n      snake.TailType = DEFAULT_SNAKE_TAIL;\n    }\n\n    // Format as actual URL if it's just a name\n    snake.HeadType = getSnakeHeadSvgUrl(snake.HeadType);\n    snake.TailType = getSnakeTailSvgUrl(snake.TailType);\n  }\n}\n\nasync function setHeadAndTailSvgs(snakes) {\n  assignHeadAndTailUrls(snakes);\n  await loadSvgs(getAllSvgs(snakes));\n\n  for (const snake of snakes) {\n    snake.HeadSvg = getSvg(snake.HeadType);\n    snake.TailSvg = getSvg(snake.TailType);\n  }\n}\n\nfunction isIllegalSvgPath(nameOrPath) {\n  return nameOrPath.indexOf(\"/\") >= 0 || nameOrPath.indexOf(\".\") >= 0;\n}\n\nfunction svgUrlFromName(base, relative) {\n  return join(base, relative) + \".svg\";\n}\n\nfunction getSnakeHeadSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_HEAD : path;\n  return svgUrlFromName(\"images/snake/head\", effectivePath);\n}\n\nfunction getSnakeTailSvgUrl(path) {\n  const effectivePath = isIllegalSvgPath(path) ? DEFAULT_SNAKE_TAIL : path;\n  return svgUrlFromName(\"images/snake/tail\", effectivePath);\n}\n\nasync function prepareFrame(frame) {\n  await setHeadAndTailSvgs(frame.Snakes);\n}\n\nexport function fetchGameInfo(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}`);\n  return get(url);\n}\n\nexport async function fetchGameStart(baseUrl, gameId) {\n  const url = join(baseUrl, `games/${gameId}/start`);\n  // Only returns a 200 OK with no data, don't need to deal with the response\n  await fetch(url, {\n    method: \"POST\",\n    cache: \"no-cache\"\n  });\n}\n\nexport async function streamAllFrames(baseUrl, gameId, receiveFrame) {\n  const game = await fetchGameInfo(baseUrl, gameId);\n\n  let chain = Promise.resolve();\n  function onFrame(frame) {\n    chain = chain.then(async () => {\n      await prepareFrame(frame);\n      return receiveFrame(game, frame);\n    });\n    return isLastFrameOfGame(frame);\n  }\n\n  const wsUrl = join(httpToWsProtocol(baseUrl), `socket/${gameId}`);\n  await streamAll(wsUrl, onFrame);\n  await chain;\n}\n\nexport function getFrameByTurn(frames, turn) {\n  return frames.filter(frame => frame.turn === turn)[0];\n}\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport { colors, themes } from \"../theme\";\nimport { getReadableCauseOfDeath } from \"../utils/engine-client\";\n\nconst AvatarWrapper = styled(\"div\")({\n  marginBottom: \".5rem\",\n  paddingTop: \"1rem\",\n  width: \"100%\",\n  paddingBottom: \"1rem\"\n});\n\nconst Name = styled(\"span\")({\n  display: \"block\",\n  paddingBottom: \"1rem\"\n});\n\nconst HealthBarWrapper = styled(\"div\")({\n  width: \"100%\",\n  height: \"1.8rem\",\n  background: colors.healthBarBackground,\n  borderRadius: \"1.5rem\"\n});\n\nconst HealthBar = styled(\"div\")(({ color }) => ({\n  height: \"100%\",\n  backgroundColor: color,\n  borderRadius: \"inherit\"\n}));\n\nconst CauseOfDeath = styled(\"div\")(({ theme }) => ({\n  height: \"100%\",\n  padding: \".2rem .5rem\",\n  fontSize: \"1.2rem\",\n  backgroundColor:\n    theme === themes.dark\n      ? colors.healthBarDeathBackgroundDark\n      : colors.healthBarDeathBackground,\n  borderRadius: \"inherit\",\n  color: colors.darkText\n}));\n\nclass Avatar extends React.Component {\n  render() {\n    return (\n      <AvatarWrapper>\n        <Name>{this.props.snake.name}</Name>\n        <HealthBarWrapper>\n          {this.props.snake.death ? (\n            <CauseOfDeath theme={this.props.theme}>\n              {getReadableCauseOfDeath(this.props.snake.death.cause)}\n            </CauseOfDeath>\n          ) : (\n            <HealthBar\n              color={this.props.snake.color}\n              style={{\n                width: `${this.props.snake.health}%`\n              }}\n            />\n          )}\n        </HealthBarWrapper>\n      </AvatarWrapper>\n    );\n  }\n}\n\nexport default Avatar;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport Avatar from \"./avatar\";\nimport { breakpoints, colors, themes } from \"../theme\";\n\nconst orderSnakes = snakes => {\n  // Sort by name\n  const aliveSnakes = snakes\n    .filter(s => !s.isDead)\n    .sort((a, b) => {\n      const aLower = a.name.toLowerCase();\n      const bLower = b.name.toLowerCase();\n      if (aLower < bLower) {\n        return -1;\n      }\n      if (aLower > bLower) {\n        return 1;\n      }\n      return 0;\n    });\n\n  // Sort by turn died, descending\n  const deadSnakes = snakes\n    .filter(s => s.isDead)\n    .sort((a, b) => a.death.turn - b.death.turn)\n    .reverse();\n\n  return aliveSnakes.concat(deadSnakes);\n};\n\nconst Wrapper = styled(\"div\")`\n  display: none;\n  padding-right: 2rem;\n  color: ${({ theme }) =>\n    theme === themes.dark ? colors.lightText : colors.darkText};\n  font-weight: 700;\n  font-size: 2.2rem;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nconst AvatarWrapper = styled(\"div\")`\n  transition: background-color 0.2s, box-shadow 0.2s;\n  box-shadow: ${props =>\n    props.highlighted ? `0 0 0 1px ${colors.lightText}` : null};\n\n  &:hover {\n    background-color: ${props =>\n      props.theme === themes.dark ? colors.purple : colors.light};\n    cursor: pointer;\n  }\n`;\n\nclass Scoreboard extends React.Component {\n  state = {\n    highlightedSnake: null\n  };\n\n  toggleHighlight = snake => {\n    const getSnakeToHighlight = (state, snake) => {\n      return state.highlightedSnake !== snake._id ? snake._id : null;\n    };\n\n    this.props.highlightSnake(getSnakeToHighlight(this.state, snake));\n\n    this.setState(state => ({\n      highlightedSnake: getSnakeToHighlight(state, snake)\n    }));\n  };\n\n  render() {\n    const { highlightedSnake } = this.state;\n    return (\n      <Wrapper theme={this.props.theme}>\n        {this.props.snakes\n          ? orderSnakes(this.props.snakes).map((snake, i) => (\n              <AvatarWrapper\n                key={\"avatarwrapper\" + i}\n                onClick={() => this.toggleHighlight(snake)}\n                highlighted={highlightedSnake === snake._id}\n                theme={this.props.theme}\n              >\n                <Avatar\n                  snake={snake}\n                  key={\"avatar\" + i}\n                  theme={this.props.theme}\n                />\n              </AvatarWrapper>\n            ))\n          : undefined}\n      </Wrapper>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport styled from \"react-emotion\";\nimport KeyboardEventHandler from \"react-keyboard-event-handler\";\n\nimport { breakpoints } from \"../theme\";\n\nconst MediaControlsWrapper = styled(\"div\")`\n  display: none;\n  margin-top: 1rem;\n  width: 100%;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nconst TurnCount = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  marginBottom: \"2rem\",\n  color: \"#777\"\n});\n\nconst ButtonWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"center\",\n  width: \"100%\"\n});\n\nconst Button = styled(\"button\")`\n  display: inline-block;\n  min-width: 10rem;\n  text-align: center;\n  color: #333;\n  font-size: 1.6rem;\n  border: none;\n  text-decoration: none;\n  text-align: center;\n  cursor: pointer;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    color: #ccc;\n    cursor: not-allowed;\n  }\n`;\n\nclass MediaControls extends React.Component {\n  componentWillMount() {\n    this.keyEvents = [\"r\", \"left\", \"right\", \"space\"];\n  }\n\n  render() {\n    return this.renderControls();\n  }\n\n  handleReload = () => {\n    this.props.reloadGame();\n  };\n\n  handlePlayPause = () => {\n    this.props.toggleGamePause();\n  };\n\n  handleBackward = () => {\n    this.props.stepBackwardFrame();\n  };\n\n  handleForward = () => {\n    this.props.stepForwardFrame();\n  };\n\n  handleKeyEvent = key => {\n    switch (key) {\n      case \"r\":\n        this.handleReload();\n        break;\n      case \"left\":\n        this.handleBackward();\n        break;\n      case \"right\":\n        this.handleForward();\n        break;\n      case \"space\":\n        this.handlePlayPause();\n        break;\n      default:\n        break;\n    }\n  };\n\n  renderControls() {\n    const { currentFrame, hideControls, paused } = this.props;\n\n    return (\n      <MediaControlsWrapper hide={hideControls}>\n        <TurnCount>Turn: {currentFrame.turn}</TurnCount>\n        <ButtonWrapper>\n          <Button\n            onClick={this.handleReload}\n            disabled={currentFrame.turn === 0 || !paused}\n          >\n            Reload\n          </Button>\n          <Button onClick={this.handlePlayPause}>\n            {paused ? \"Play\" : \"Pause\"}\n          </Button>\n          <Button\n            onClick={this.handleBackward}\n            disabled={currentFrame.turn === 0 || !paused}\n          >\n            Backward\n          </Button>\n          <Button onClick={this.handleForward} disabled={!paused}>\n            Forward\n          </Button>\n          <KeyboardEventHandler\n            handleKeys={this.keyEvents}\n            onKeyEvent={this.handleKeyEvent}\n          />\n        </ButtonWrapper>\n      </MediaControlsWrapper>\n    );\n  }\n}\n\nexport default MediaControls;\n","import React from \"react\";\nimport styled from \"react-emotion\";\n\nimport BlankState from \"./blank-state\";\nimport Board from \"./board\";\nimport Scoreboard from \"./scoreboard\";\nimport MediaControls from \"./mediaControls\";\nimport { breakpoints, colors, themes } from \"../theme\";\n\nconst PageWrapper = styled(\"div\")`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  background: ${({ theme }) =>\n    theme === themes.dark ? colors.purple : \"transparent\"};\n  background: ${({ theme }) =>\n    theme === themes.dark\n      ? `linear-gradient(45deg, #000 0%, ${colors.purple} 100%)`\n      : \"transparent\"};\n`;\n\nconst LoadingIndicator = styled(\"div\")({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  height: \"100%\",\n  width: \"100%\"\n});\n\nconst GameBoardWrapper = styled(\"div\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  width: \"100%\",\n  height: \"100%\"\n});\n\nconst BoardWrapper = styled(\"div\")`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  @media (min-width: ${breakpoints.md}) {\n    width: ${({ hideScoreboard }) => (hideScoreboard ? \"100%\" : \"65vw\")};\n  }\n`;\n\nconst ScoreboardWrapper = styled(\"div\")`\n  display: none;\n  width: 35vw;\n  margin-left: 2rem;\n\n  @media (min-width: ${breakpoints.md}) {\n    display: ${({ hide }) => (hide ? \"none\" : \"block\")};\n  }\n`;\n\nclass Game extends React.Component {\n  componentWillMount() {\n    const { options } = this.props;\n\n    this.theme = this.props.options.boardTheme\n      ? this.props.options.boardTheme\n      : themes.light;\n\n    if (options.game && options.engine) {\n      this.hideScoreboard = this.props.options.hideScoreboard === \"true\";\n      this.props.setEngineOptions(options);\n      this.props.fetchFrames();\n    } else {\n      this.invalidArgs = true;\n    }\n  }\n\n  render() {\n    if (this.invalidArgs) {\n      return <BlankState />;\n    }\n\n    if (this.props.currentFrame) {\n      return this.renderGame();\n    }\n\n    return (\n      <LoadingIndicator>\n        <div\n          className=\"la-ball-grid-beat la-dark la-2x\"\n          style={{\n            color: colors.food\n          }}\n        >\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n      </LoadingIndicator>\n    );\n  }\n\n  renderGame() {\n    return (\n      <PageWrapper theme={this.theme}>\n        <GameBoardWrapper>\n          <BoardWrapper hideScoreboard={this.hideScoreboard}>\n            <Board\n              snakes={this.props.currentFrame.snakes}\n              food={this.props.currentFrame.food}\n              columns={this.props.grid.width}\n              rows={this.props.grid.height}\n              highlightedSnake={this.props.highlightedSnake}\n              theme={this.theme}\n            />\n            <MediaControls\n              currentFrame={this.props.currentFrame}\n              hideControls={this.props.options.hideMediaControls === \"true\"}\n              reloadGame={this.props.reloadGame}\n              toggleGamePause={this.props.toggleGamePause}\n              stepBackwardFrame={this.props.stepBackwardFrame}\n              stepForwardFrame={this.props.stepForwardFrame}\n              paused={this.props.paused}\n            />\n          </BoardWrapper>\n          {!this.hideScoreboard && (\n            <ScoreboardWrapper>\n              <Scoreboard\n                turn={this.props.currentFrame.turn}\n                snakes={this.props.currentFrame.snakes}\n                food={this.props.currentFrame.food}\n                highlightSnake={this.props.highlightSnake}\n                theme={this.theme}\n              />\n            </ScoreboardWrapper>\n          )}\n        </GameBoardWrapper>\n      </PageWrapper>\n    );\n  }\n}\n\nexport default Game;\n","import {\n  delay,\n  fetchGameStart,\n  getFrameByTurn,\n  streamAllFrames\n} from \"../utils/engine-client\";\n\nconst DEFAULT_FPS = 20;\n\nexport const setEngineOptions = engineOptions => ({\n  type: \"SET_ENGINE_OPTIONS\",\n  engineOptions\n});\n\nexport const gameOver = () => ({\n  type: \"GAME_OVER\"\n});\n\nexport const requestFrames = () => ({\n  type: \"REQUEST_FRAMES\"\n});\n\nexport const receiveFrame = (game, frame) => ({\n  type: \"RECEIVE_FRAME\",\n  game,\n  frame\n});\n\nexport const setCurrentFrame = frame => ({\n  type: \"SET_CURRENT_FRAME\",\n  frame\n});\n\nexport const setGameStatus = status => ({\n  type: \"SET_GAME_STATUS\",\n  status\n});\n\nexport const pauseGame = () => ({\n  type: \"PAUSE_GAME\"\n});\n\nexport const resumeGame = () => ({\n  type: \"RESUME_GAME\"\n});\n\nexport const highlightSnake = snakeId => ({\n  type: \"HIGHLIGHT_SNAKE\",\n  snakeId\n});\n\nexport const fetchFrames = () => {\n  return async (dispatch, getState) => {\n    const {\n      autoplay,\n      engine: engineUrl,\n      game: gameId,\n      turn\n    } = getState().engineOptions;\n\n    dispatch(requestFrames());\n\n    await streamAllFrames(engineUrl, gameId, (game, frame) => {\n      dispatch(setGameStatus(game.Game.Status));\n\n      // Workaround for bug where turn exluded on turn 0\n      frame.Turn = frame.Turn || 0;\n      dispatch(receiveFrame(game, frame));\n\n      // Workaround to render the first frame into the board\n      if (frame.Turn === 0) {\n        const frame = getState().frames[0];\n        dispatch(setCurrentFrame(frame));\n      }\n    });\n\n    if (autoplay) {\n      const frame = getState().frames[0];\n      dispatch(resumeGame());\n      dispatch(playFromFrame(frame));\n    }\n\n    // Only navigate to the specified frame if it is within the\n    // amount of frames available in the game\n    if (turn && turn <= getState().frames.length) {\n      const frame = getState().frames[turn];\n      dispatch(setCurrentFrame(frame));\n    }\n  };\n};\n\nexport const playFromFrame = frame => {\n  return async (dispatch, getState) => {\n    const { frameRate } = getState().engineOptions;\n    const frames = getState().frames.slice(); // Don't modify in place\n    const frameIndex = frames.indexOf(frame);\n    const slicedFrames = frames.slice(frameIndex);\n\n    const ceiledFps = Math.ceil(frameRate || DEFAULT_FPS);\n    const delayMillis = 1000 / ceiledFps;\n\n    for (const frame of slicedFrames) {\n      if (getState().paused) return;\n      dispatch(setCurrentFrame(frame));\n      await delay(delayMillis);\n    }\n\n    const lastFrame = slicedFrames[slicedFrames.length - 1];\n    if (lastFrame.gameOver) {\n      if (!getState().paused) dispatch(gameOver());\n    } else {\n      dispatch(playFromFrame(lastFrame));\n    }\n  };\n};\n\nexport const reloadGame = () => {\n  return async (dispatch, getState) => {\n    const { frames, paused } = getState();\n    if (paused) {\n      const frame = getFrameByTurn(frames, 0);\n      dispatch(setCurrentFrame(frame));\n    }\n  };\n};\n\nexport const toggleGamePause = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, gameStatus, paused, engineOptions } = getState();\n\n    if (paused) {\n      if (gameStatus === \"stopped\") {\n        await fetchGameStart(engineOptions.engine, engineOptions.game);\n        dispatch(fetchFrames());\n      }\n\n      dispatch(resumeGame());\n      dispatch(playFromFrame(currentFrame));\n    } else {\n      dispatch(pauseGame());\n    }\n  };\n};\n\nexport const stepForwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const nextFrame = currentFrame.turn + 1;\n    const stepToFrame = getFrameByTurn(frames, nextFrame);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n\nexport const stepBackwardFrame = () => {\n  return async (dispatch, getState) => {\n    const { currentFrame, frames } = getState();\n    const prevFrame = currentFrame.turn - 1;\n    const stepToFrame = getFrameByTurn(frames, prevFrame);\n    if (stepToFrame) {\n      dispatch(setCurrentFrame(stepToFrame));\n    }\n  };\n};\n","import { connect } from \"react-redux\";\nimport { parseQueryString } from \"../utils/url\";\nimport Game from \"../components/game\";\nimport {\n  fetchFrames,\n  reloadGame,\n  toggleGamePause,\n  setEngineOptions,\n  stepForwardFrame,\n  stepBackwardFrame,\n  highlightSnake\n} from \"../actions\";\n\nconst options = parseQueryString(window.location.search);\n\nconst mapStateToProps = state => {\n  return {\n    options: options,\n    grid: state.grid,\n    paused: state.paused,\n    currentFrame: state.currentFrame,\n    frames: state.frames,\n    highlightedSnake: state.highlightedSnake,\n    gameStatus: state.gameStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setEngineOptions: options => dispatch(setEngineOptions(options)),\n  fetchFrames: () => dispatch(fetchFrames()),\n  reloadGame: () => dispatch(reloadGame()),\n  toggleGamePause: paused => dispatch(toggleGamePause(paused)),\n  stepForwardFrame: () => dispatch(stepForwardFrame()),\n  stepBackwardFrame: () => dispatch(stepBackwardFrame()),\n  highlightSnake: snakeId => dispatch(highlightSnake(snakeId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n","import React from \"react\";\nimport { render } from \"react-dom\";\n// import { compose, createStore, applyMiddleware } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers\";\nimport App from \"./containers/app\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst initialState = {\n  options: null,\n  grid: [],\n  frames: [],\n  paused: true,\n  highlightedSnake: null\n};\nconst middleware = applyMiddleware(thunkMiddleware);\nconst store = createStore(rootReducer, initialState, middleware);\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   rootReducer,\n//   initialState,\n//   composeEnhancers(applyMiddleware(thunkMiddleware))\n// );\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}